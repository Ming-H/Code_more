#############################################
import copy
a
Out[210]: [888, 2, 3, [4, 5]]
b = copy.copy(a)
b
Out[212]: [888, 2, 3, [4, 5]]
b[0] = 233
b
Out[214]: [233, 2, 3, [4, 5]]
a
Out[215]: [888, 2, 3, [4, 5]]
b[3][1] = 666
b
Out[217]: [233, 2, 3, [4, 666]]
a
Out[218]: [888, 2, 3, [4, 666]]

#############################################
import copy
a
Out[210]: [888, 2, 3, [4, 5]]
b = copy.deepcopy(a)
b
Out[221]: [888, 2, 3, [4, 666]]
b[0] = 1
b
Out[223]: [1, 2, 3, [4, 666]]
a
Out[224]: [888, 2, 3, [4, 666]]
b[3][0] = 233
b
Out[226]: [1, 2, 3, [233, 666]]
a
Out[227]: [888, 2, 3, [4, 666]]

#############################################
a
Out[229]: [888, 2, 3, [4, 666]]
b = a
b
Out[231]: [888, 2, 3, [4, 666]]
b[0] = 1
b
Out[233]: [1, 2, 3, [4, 666]]
a
Out[234]: [1, 2, 3, [4, 666]]
b[3][0] = 1
b
Out[236]: [1, 2, 3, [1, 666]]
a
Out[237]: [1, 2, 3, [1, 666]]


"""
深拷贝就是把要拷贝的对象整体复制一份，存在新开辟的空间里；
而浅拷贝指的是，对于要拷贝的对象要复制一份，但是对于其内部
的子对象就不复制了，而是直接引用，也就是类似于添加了一个链
接而已；
直接赋值的结果是比浅拷贝还浅拷贝的，因为a和b根本上就是指向
的同一个对象。
"""

# 参考文献：https://blog.csdn.net/edogawachia/article/details/79762310 

